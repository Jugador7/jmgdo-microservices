Task 2 - Creating Swagger Documentation and Generating Server code
Now you will create a REST API with Swagger documentation. To start with, let’s define your application.
It will adhere to Swagger 2.0 version
This is the first version of the application
It will have one endpoint /greetings, which returns the list of greetings as a JSON object.
Copy and paste the following JSON in the Swagger Editor. You will get a prompt which says Would you like to convert your JSON into YAML? . Press Cancel to paste the content.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
{
    "swagger": "2.0",
    "info": {
      "version": "1.0",
      "title": "Our first generated REST API",
      "description": "<h2>This is a sample server code the is generated from Swagger Documenation with Swagger Editor</h2>"
    },
    "paths": {
      "/greetings": {
        "get": {
          "summary": "Returns a list of Greetings",
          "tags": ["Hello in Different Languages"],
          "description": "Returns greetings in different languages",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        }
      }
    }
}
Copied!

You will see the Swagger UI automatically appearing on the right. You cannot test it yet as your application is not defined and running yet.

From the menu on top, click on Generate Server and select python-flask. This will automatically generate the server code as a zip file named python-flask-server-generated.zip. Download the zip file to your system.

In your lab envrionment, click on the PROJECT folder and drag and drop the zip file there.

On the terminal go to the /home/project directory.
1
cd /home/project


Check to see if the zip file that you just dragged and dropped, exists.
1
ls python-flask-server-generated.zip
Copied!
Unzip the contents of the zip file into a directory named python-flask-server-generated by running the following command.
1
unzip python-flask-server-generated.zip -d python-flask-server-generated/
Copied!
Change to the python-flask-server folder inside the folder you just extracted the zip file into.
1
cd python-flask-server-generated/python-flask-server

The entire server setup along with endpoint is done for you already. Let's build the server code.
1
docker build . -t mynewserver
Copied!
This takes a while. If the build runs successfully you will have a new container with tag mynewserver.

Run the docker application now by running the following command. The server generated code automatically is configured to run on port 8080.
1
docker run -dp 8080:8080 mynewserver
Copied!
You will get a hex code that indicates the application has started.

To confirm that the service is running and your REST API works, execute the following command.
1
curl localhost:8080/greetings
Copied!

What you see in the output is what you have to do. do some magic!

Click here for hint in case you encounter an error
First inspect the Docker images you've built by executing the following command:
1
docker images
Copied!
This command will provide a list of Docker images, with their respective IMAGE IDs.

Then delete the Docker image of mynewserver by using the following command:

1
docker rmi -f <IMAGE ID>
Copied!
Make sure to replace "<IMAGE ID>" with the actual IMAGE ID of mynewserver you got in the previous step.

Open the "requirements.txt" file which present inside the unzipped folder named "python-flask-server-generated" and update the connexion version to "connexion >= 2.7.0, < 3.0.0" as shown in the screenshot below.



Once the image is deleted, proceed with rebuilding the docker image and allowing some time before running the docker application.



Now you should stop the server. For this you need the docker container id. Run the following command and copy the container id.
1
docker ps | grep mynewserver
Copied!

To stop the container you need to kill the instance referring to the container id you copied in the last step.
1
docker kill <container_id>
Copied!
In the file explorer go to, python-flask-server-generated/python-flask-server/swagger_server/controllers/hello_in_different_languages_controller.py. This is where you need to implement your actual response for the REST API.

Replace return 'do some magic!' with the following code. As this is the python code and the indentation in Python is very important, make sure you check the indentations error.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
hellos = {
  "English": "hello",
  "Hindi": "namastey",
  "Spanish": "hola",
  "French": "bonjour",
  "German": "guten tag",
  "Italian": "salve",
  "Chinese": "nǐn hǎo",
  "Portuguese": "olá",
  "Arabic": "asalaam alaikum",
  "Japanese": "konnichiwa",
  "Korean": "anyoung haseyo",
  "Russian": "Zdravstvuyte"
}
return hellos
Copied!
Build the docker container again to ensure the changed code is taken in.
1
docker build . -t mynewserver
Copied!
Run the container now with the following command. You may notice that you are using -p instead of -dp. This is to ensure the server is not running in discreet mode and you are able to see errors if any.
1
docker run -p 8080:8080 mynewserver
Copied!
Click on the Skills Network button on the left, it will open the "Skills Network Toolbox". Then click Launch Application, from there you enter the port no. as 8080 and click Your Application button. This will open a browser window. Append the path /greetings to the URL. You should see the greetings in the page.

Congratulations! You have successfully completed the task.